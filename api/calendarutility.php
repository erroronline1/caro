<?php
// calendar
class CALENDARUTILITY {
	/**
	 * calendar handler writing to database and rendering either weeks or months for given date or now by default
	 * include to display calendar or use for scheduling and timesheets
	 * with hopefully well prepared date-handling
	 */


   	/**
	 * preset database connection, passed from main application
	 */
	private $_pdo = null;

   	/**
	 * displayed days for given date or default now, can be set through function days() and processed later on
	 * will be generated by function render() if not set or latter has been passed a date 
	 */
	public $_days = [];

	/**
	 * ini settings avoiding repetitive calls
	 */
	private $_holidays = [];
	private $_easter_holidays = [];
	private $_workdays = [];

	public function __construct($pdo){
		$this->_pdo = $pdo;
		$this->_holidays = preg_split('/[^\d-]+/', INI['calendar']['holidays']);
		$this->_easter_holidays = INI['calendar']['easter_holidays'];
		$this->_workdays = preg_split('/[^\d-]+/', INI['calendar']['workdays']);
	}

	/**
	 * calculates holidays for given year, according to setup.ini
	 * no setting up on construction for possible year overlaps on week rendering
	 * @param int $year Y
	 * @return array containing holiday dates for a given year
	 */
	private function holidays($year){
		$holidays = $this->_holidays;
		$holidays = array_map(Fn($d) => $year . '-'. $d, $holidays);

		$easter = new DateTime();
		$easter->setTimestamp(easter_date($year)); //suppoed to be easter sunday but isn't?
		$easter->modify('+1 day');
		foreach($this->_easter_holidays as $day => $offset){
			$easterholiday = clone $easter;
			$easterholiday->modify(($offset < 0 ? '-' : '+') . $offset .' days');
			$holidays[] = $easterholiday->format('Y-m-d');
		}
		return $holidays;
	}

	/**
	 * calculates a calendar view, for given date week starts on monday, month on 1st
	 * 
	 * @param string $type month|week
	 * @param string $date yyyy-mm-dd
	 */
	private function days($type = '', $date = ''){
		$result = [];
		$date = new DateTime($date ? : 'now', new DateTimeZone(INI['timezone']));
		if ($type === 'week') {
			$date->modify('- ' . ($date->format('N') - 1) . ' days');
			while ($date->format('N') < 7){
				$result[] = clone $date;
				$date->modify('+1 days');
			}
			$result[] = $date;
		}
		elseif ($type === 'month') {
			$date->modify('first day of this month');
			if ($date->format('N') > 1){
				for ($i = 1; $i < $date->format('N'); $i++){
					$result[] = null;
				}
			}
			while ($date->format('j') < $date->format('t')) {
				$result[] = clone $date;
				$date->modify('+1 days');
			}
			$result[] = $date;
		}
		$this->_days = $result;
	}

	/**
	 * renders a calendar view, for given date week starts on monday, month on 1st, weekday offsets are empty
	 * calculates holidays for every date for possible year overlaps in selected view-type
	 * 
	 * @param string $type month|week
	 * @param string $date yyyy-mm-dd
	 * 
	 * @return array assemble.js calendar type
	 */
	public function render($type = '', $date = ''){
		$result = ['header' => null, 'content' => []];
		if (!$this->_days || $date) $this->days($type, $date);

		$today = new DateTime('now', new DateTimeZone(INI['timezone']));
		foreach ($this->_days as $day){
			if ($day === null) $result['content'][] = null;
			else {
				$events = $this->getdate($day->format('Y-m-d'));
				$numbers = 0;
				foreach ($events as $row){
					if (array_intersect(explode(',', $row['organizational_unit']), $_SESSION['user']['units']) && !$row['paused']) $numbers++;
				}
				$result['content'][] = [
					'date' => $day->format('Y-m-d'),
					'display' => LANGUAGEFILE['general']['weekday'][$day->format('N')] . ' ' . $day->format('j') . ($numbers ? "\n" . $numbers : ''),
					'today' => $day->format('Y-m-d') === $today->format('Y-m-d'),
					'selected' => $date === $day->format('Y-m-d'),
					'holiday' => in_array($day->format('Y-m-d'), $this->holidays($day->format('Y'))) || !in_array($day->format('N'), $this->_workdays)
				];
				if ($result['header']) continue;
				if ($type === 'week') $result['header'] = LANG::GET('general.calendar_week', [':number' => $day->format('W')]) . ' ' . $day->format('Y');
				if ($type === 'month') $result['header'] = LANGUAGEFILE['general']['month'][$day->format('n')] . ' ' . $day->format('Y');
			}
		}
		return $result;
	}

	/**
	 * returns a dialog script to contibute scheduling events to the calendar
	 * 
	 * @param string $date event date Y-m-d
	 * @param string $type calendar/alert type
	 * @param string $content event text
	 * @param string $due due date Y-m-d
	 * @param string $organizational_unit comma separated preselected units
	 * @param int $alert event triggers message
	 * @param int $id event database id for updating
	 * 
	 * @return string dialog js script
	 */
	public function schedule($date = '', $type = 'schedule', $content = '', $due = '', $organizational_unit = '', $alert = 0, $id = 0){
		$units = [];
		foreach(LANGUAGEFILE['units'] as $unit => $description){
			$units[$description] = in_array($unit, explode(',', $organizational_unit)) ? ['checked' => true, 'value' => 'unit'] : ['value' => 'unit'];
		}
		$alert = [LANG::GET('calendar.event_alert') => $alert ? ['checked' => true] : []];
		if ($date && gettype($date) === 'string') $date = new DateTime($date, new DateTimeZone(INI['timezone']));
		elseif (!$date) $date = new DateTime('now', new DateTimeZone(INI['timezone']));
		
		if ($due && gettype($due) === 'string') $due = new DateTime($due, new DateTimeZone(INI['timezone']));
		elseif (!$due) {
			$due = clone $date;
			$due->modify('+' . INI['calendar']['default_due'] . ' months');
		}

		$inputs = [
			[
				'type' => 'scanner',
				'attributes' => [
					'value' => $content,
					'name' => LANG::GET('calendar.event_content'),
					'required' => true
				]
			],
			[
				'type' => 'dateinput',
				'attributes' => [
					'value' => $date->format('Y-m-d'),
					'name' => LANG::GET('calendar.event_date'),
					'required' => true
				]
			],
			[
				'type' => 'dateinput',
				'attributes' => [
					'value' => $due->format('Y-m-d'),
					'name' => LANG::GET('calendar.event_due'),
					'required' => true
				]
			],
			[
				'type' => 'checkbox',
				'description' => LANG::GET('calendar.event_organizational_unit'),
				'content' => $units,
				'hint' => LANG::GET('calendar.event_organizational_unit_hint')
			],
			[
				'type' => 'checkbox',
				'description' => LANG::GET('calendar.event_alert_description'),
				'content' => $alert
			],
			[
				'type' => 'hiddeninput',
				'attributes' => [
					'value' => $type,
					'name' => LANG::GET('calendar.event_type')
				]
			],
			[
				'type' => 'hiddeninput',
				'attributes' => [
					'value' => $id,
					'name' => 'calendarEventId'

				]
			]
		];
		return "new Dialog({type:'input', header: '', body: " . json_encode($inputs) . ", options:{'" . LANG::GET('calendar.event_cancel') . "': false, '" . LANG::GET('calendar.event_submit') . "': {'value': true, class: 'reducedCTA'}}})" .
			".then(response => {if (response) {calendarClient.createFormData(response); api.calendar('" . ($content ? 'put': 'post') . "', 'schedule');}})";
	}

	/**
	 * returns a dialog script to contibute timesheet events to the calendar
	 * 
	 * @param string $date event date Y-m-d H:i:s
	 * @param string $type calendar/alert type
	 * @param string $content event text
	 * @param string $due due date Y-m-d H:i:s
	 * @param string $organizational_unit comma separated preselected units
	 * @param int $alert event triggers message
	 * @param int $id event database id for updating
	 * 
	 * @return string dialog js script
	 */
	public function timesheet($date = '', $type = 'timesheet', $content = '', $due = '', $break = '', $organizational_unit = '', $id = 0){
		if ($date && gettype($date) === 'string') $date = new DateTime($date, new DateTimeZone(INI['timezone']));
		elseif (!$date) $date = new DateTime('now', new DateTimeZone(INI['timezone']));

		if ($due && gettype($due) === 'string') $due = new DateTime($due, new DateTimeZone(INI['timezone']));
		elseif (!$due) {
			$due = clone $date;
			$due->modify('+1 hour');
		}

		$display = LANG::GET('calendar.timesheet_start') . ': ' . $date->format('Y-m-d H:i') . "\n" .
		LANG::GET('calendar.timesheet_end') . ': ' . $due->format('Y-m-d H:i') . "\n" .
		LANG::GET('calendar.timesheet_break') . ': ' . $break . "\n";

		$content = $content ? json_decode($content, true) : [];
		$note = $pto = '';
		if (array_key_exists('pto', $content)) {
			$t_pto = explode(' - ', $content['pto']);
			$pto = array_shift($t_pto);
			$note = implode(' - ', $t_pto);
		}
		
		$ptoselect = [];
		foreach(LANGUAGEFILE['calendar']['timesheet_pto'] as $reason){
			$ptoselect[$reason] = ['value' => $reason];
			if ($pto === $reason) $ptoselect[$reason]['selected'] = true;
		}

		$inputs = [
			[
				'type' => 'select',
				'attributes' => [
					'name' => LANG::GET('calendar.timesheet_pto_exemption'),
				],
				'content' => $ptoselect
			],
			[
				'type' => 'dateinput',
				'attributes' => [
					'value' => $date->format('Y-m-d'),
					'name' => LANG::GET('calendar.timesheet_start_date'),
					'required' => true
				]
			],
			[
				'type' => 'timeinput',
				'attributes' => [
					'value' => $date->format('H:i'),
					'name' => LANG::GET('calendar.timesheet_start_time'),
					'required' => true
				]
			],
			[
				'type' => 'dateinput',
				'attributes' => [
					'value' => $due->format('Y-m-d'),
					'name' => LANG::GET('calendar.timesheet_end_date'),
					'required' => true
				]
			],
			[
				'type' => 'timeinput',
				'attributes' => [
					'value' => $due->format('H:i'),
					'name' => LANG::GET('calendar.timesheet_end_time'),
					'required' => true
				]
			],
			[
				'type' => 'timeinput',
				'attributes' => [
					'value' => $break,
					'name' => LANG::GET('calendar.timesheet_break_time'),
					'required' => true
				]
			],
			[
				'type' => 'textinput',
				'attributes' => [
					'value' => $note,
					'name' => LANG::GET('calendar.timesheet_pto_note'),
				]
			],
			[
				'type' => 'numberinput',
				'attributes' => [
					'value' => array_key_exists('weeklyhours', $content) ? $content['weeklyhours'] : '',
					'step' => .1,
					'required' => true,
					'name' => LANG::GET('calendar.timesheet_weekly_hours'),
				]
			],
			[
				'type' => 'hiddeninput',
				'attributes' => [
					'name' => LANG::GET('calendar.event_organizational_unit'),
					'value' => $organizational_unit
				]
			],
			[
				'type' => 'hiddeninput',
				'attributes' => [
					'value' => $type,
					'name' => LANG::GET('calendar.event_type')
				]
			],
			[
				'type' => 'hiddeninput',
				'attributes' => [
					'value' => $id,
					'name' => 'calendarEventId'
				]
			],
			[
				'type' => 'hiddeninput',
				'attributes' => [
					'value' => array_key_exists('foreigncontributor', $content) ? $content['foreigncontributor'] : '',
					'name' => LANG::GET('calendar.timesheet_foreign_contributor')
				]
			]
		];
		if (array_key_exists('homeoffice', $_SESSION['user']['app_settings']) && $_SESSION['user']['app_settings']['homeoffice']) array_splice($inputs, 5, 0, [
			[
				'type' => 'timeinput',
				'attributes' => [
					'value' => array_key_exists('homeoffice', $content) ? $content['homeoffice'] : '',
					'name' => LANG::GET('calendar.timesheet_homeoffice'),
					'required' => true
				]
			]
		]);
		return "new Dialog({type:'input', header: '', body: " . json_encode($inputs) . ", options:{'" . LANG::GET('calendar.event_cancel') . "': false, '" . LANG::GET('calendar.event_submit') . "': {'value': true, class: 'reducedCTA'}}})" .
			".then(response => {if (response) {calendarClient.createFormData(response); api.calendar('" . ($content ? 'put': 'post') . "', 'timesheet');}})";
	}

	/**
	 * @param string $date Y-m-d
	 * @return array sql result
	 */
	public function getdate($date = ''){
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_get-date'));
		$statement->execute([
			':date' => $date
		]);
		return $statement->fetchAll(PDO::FETCH_ASSOC);
	}

	/**
	 * @param string $date Y-m-d
	 * @return array sql result
	 */
	public function alert($date = ''){
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_alert'));
		$statement->execute([
		]);
		return $statement->fetchAll(PDO::FETCH_ASSOC);
	}

	/**
	 * @param string $earlier Y-m-d | null
	 * @param string $later Y-m-d | null
	 * @return array sql result
	 */
	public function getdaterange($earlier = '', $later = ''){
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_get-date-range'));
		$statement->execute([
			':earlier' => $earlier ? : '0001-01-01 00:00:01',
			':later' => $later ? : '9999-12-31 23:59:59'
		]);
		return $statement->fetchAll(PDO::FETCH_ASSOC);
	}

	/**
	 * @param int $content
	 * @return array sql result
	 */
	public function search($content = ''){
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_search'));
		$statement->execute([
			':content' => $content
		]);
		return $statement->fetchAll(PDO::FETCH_ASSOC);
	}

	/**
	 * @param string $date
	 * @param string $due
	 * @param string $type
	 * @param int $user_id
	 * @param string $organizational_unit
	 * @param string $content
	 * @param int $alert
	 * @return int|bool insert id
	 */
	public function post($date = '', $due = '', $type = '', $user_id = '', $organizational_unit = '', $content = '', $paused = '', $alert = 0){
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_post'));
		if ($statement->execute([
			':date' => $date,
			':due' => $due,
			':type' => $type,
			':user_id' => $user_id,
			':organizational_unit' => $organizational_unit,
			':content' => $content,
			':paused' => $paused,
			':alert' => $alert
		])) return $this->_pdo->lastInsertId();
		return false;
	}

	/**
	 * @param int $id
	 * @param string $date
	 * @param string $due
	 * @param int $user_id
	 * @param string $organizational_unit
	 * @param string $content
	 * @param int $alert
	 * @return int affected rows
	 */
	public function put($id = 0, $date = '', $due = '', $user_id = 0, $organizational_unit = '', $content = '', $paused = '', $alert = 0){
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_put'));
		$statement->execute([
			':id' => $id,
			':date' => $date,
			':due' => $due,
			':user_id' => $user_id,
			':organizational_unit' => $organizational_unit,
			':content' => $content,
			':paused' => $paused,
			':alert' => $alert
		]);
		return $statement->rowCount();
	}

	/**
	 * @param int $id
	 * @param any $complete boolval false will clear
	 * @return int affected rows
	 */
	public function complete($id = 0, $complete = null){
		if ($complete) $complete = ['user' => $_SESSION['user']['name'], 'date' => date('Y-m-d')];
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_complete'));
		$statement->execute([
			':id' => $id,
			':completed' => $complete ? json_encode($complete) : '',
		]);
		return $statement->rowCount();
	}

	/**
	 * @param int $id
	 * @return int affected rows
	 */
	public function delete($id = 0){
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_delete'));
		$statement->execute([
			':id' => $id
		]);
		return $statement->rowCount();
	}
}
?>