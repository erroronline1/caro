<?php
// calendar
class CALENDAR {
	/**
	 * calendar handler writing to database and rendering either weeks or months for given date or now by default
	 * include to display calendar or use for planning
	 */


   	/**
	 * preset database connection, passes from main application
	 */
	private $_pdo = null;

   	/**
	 * displayed days for given date or default now, can be set through function days() and processed later on
	 * will be generated by function render() if not set or latter has been passed a date 
	 */
	public $_days = [];

	/**
	 * ini settings avoiding repetitive calls
	 */
	private $_holidays = [];
	private $_easter_holidays = [];
	private $_workdays = [];

	public function __construct($pdo){
		$this->_pdo = $pdo;
		$this->_holidays = preg_split('/[^\d-]+/', INI['calendar']['holidays']);
		$this->_easter_holidays = INI['calendar']['easter_holidays'];
		$this->_workdays = preg_split('/[^\d-]+/', INI['calendar']['workdays']);
	}

	/**
	 * calculates holidays for given year, according to setup.ini
	 * no setting up on construction for possible year overlaps on week rendering
	 */
	private function holidays($year){
		$holidays = $this->_holidays;
		$holidays = array_map(Fn($d) => $year . '-'. $d, $holidays);

		$easter = new DateTime();
		$easter->setTimestamp(easter_date($year)); //suppoed to be easter sunday but isn't?
		$easter->modify('+1 day');
		foreach($this->_easter_holidays as $day => $offset){
			$easterholiday = clone $easter;
			$easterholiday->modify(($offset < 0 ? '-' : '+') . $offset .' days');
			$holidays[]= $easterholiday->format('Y-m-d');
		}
		return $holidays;
	}

	/**
	 * calculates a calendar view, for given date week starts on monday, month on 1st
	 * 
	 * @param string $type month|week
	 * @param string $date yyyy-mm-dd
	 * 
	 * @return array $calendar [null for display offset || DateTime object]
	 */
	private function days($type = '', $date = ''){
		$result = [];
		$date = new DateTime($date ? : 'now', new DateTimeZone(INI['timezone']));
		if ($type === 'week') {
			$date->modify('- ' . ($date->format('N') - 1) . ' days');
			while ($date->format('N') < 7){
				$result[] = clone $date;
				$date->modify('+1 days');
			}
			$result[] = $date;
		}
		elseif ($type === 'month') {
			$date->modify('first day of this month');
			if ($date->format('N') > 1){
				for ($i = 1; $i < $date->format('N'); $i++){
					$result[] = null;
				}
			}
			while ($date->format('j') < $date->format('t')) {
				$result[] = clone $date;
				$date->modify('+1 days');
			}
			$result[] = $date;
		}
		$this->_days = $result;
	}

	/**
	 * renders a calendar view, for given date week starts on monday, month on 1st, weekday offsets are empty
	 * calculates holidays for every date for possible year overlaps in selected view-type
	 * 
	 * @param string $type month|week
	 * @param string $date yyyy-mm-dd
	 * 
	 * @return array $calendar [null for display offset || day info]
	 */
	public function render($type = '', $date = ''){
		$result = ['header' => null, 'content' => []];
		if (!$this->_days || $date) $this->days($type, $date);

		$today = new DateTime('now', new DateTimeZone(INI['timezone']));
		foreach ($this->_days as $day){
			if ($day === null) $result['content'][] = null;
			else {
				$events = $this->getdate($day->format('Y-m-d'));
				$numbers = 0;
				foreach ($events as $row){
					if (array_intersect(explode(',', $row['organizational_unit']), $_SESSION['user']['units']) && !$row['completed']) $numbers++;
				}
				$result['content'][] = [
					'date' => $day->format('Y-m-d'),
					'display' => LANGUAGEFILE['general']['weekday'][$day->format('N')] . ' ' . $day->format('j') . ($numbers ? "\n" . $numbers : ''),
					'today' => $day->format('Y-m-d') === $today->format('Y-m-d'),
					'selected' => $date === $day->format('Y-m-d'),
					'holiday' => in_array($day->format('Y-m-d'), $this->holidays($day->format('Y'))) || !in_array($day->format('N'), $this->_workdays)
				];
				if ($result['header']) continue;
				if ($type === 'week') $result['header'] = LANG::GET('general.calendar_week', [':number' => $day->format('W')]) . ' ' . $day->format('Y');
				if ($type === 'month') $result['header'] = LANGUAGEFILE['general']['month'][$day->format('n')] . ' ' . $day->format('Y');
			}
		}
		return $result;
	}

	/**
	 * returns a dialog script to contibute to the calendar
	 * 
	 * @param str $date event date Y-m-d
	 * @param str $type calendar/alert type
	 * @param str $content event text
	 * @param str $due due date Y-m-d
	 * @param str $organizational_unit comma separated preselected units
	 * @param int $alert event triggers message
	 * @param int $id event database id for updating
	 * 
	 */
	public function dialog($date = '', $type = '', $content = '', $due = '', $organizational_unit = '', $alert = 0, $id = 0){
		$units = [];
		foreach(LANGUAGEFILE['units'] as $unit => $description){
			$units[$description] = in_array($unit, explode(',', $organizational_unit)) ? ['checked' => true, 'value' => 'unit'] : ['value' => 'unit'];
		}
		$alert = [LANG::GET('planning.event_alert') => $alert ? ['checked' => true] : []];
		if (!$due){
			$due = new DateTime($date, new DateTimeZone(INI['timezone']));
			$due->modify('+' . INI['calendar']['default_due'] . ' months');
			$due = $due->format('Y-m-d');
		}
		$inputs = [
			[
				'type' => 'scanner',
				'attributes' => [
					'value' => $content,
					'name' => LANG::GET('planning.event_content')
				]
			],
			[
				'type' => 'dateinput',
				'attributes' => [
					'value' => $date,
					'name' => LANG::GET('planning.event_date')
				]
			],
			[
				'type' => 'dateinput',
				'attributes' => [
					'value' => $due,
					'name' => LANG::GET('planning.event_due')
				]
			],
			[
				'type' => 'checkbox',
				'description' => LANG::GET('planning.event_organizational_unit'),
				'content' => $units
			],
			[
				'type' => 'checkbox',
				'description' => LANG::GET('planning.event_alert_description'),
				'content' => $alert
			],
			[
				'type' => 'hiddeninput',
				'attributes' => [
					'value' => 'planning',
					'name' => LANG::GET('planning.event_type')

				]
			],
			[
				'type' => 'hiddeninput',
				'attributes' => [
					'value' => $id,
					'name' => 'calendarEventId'

				]
			]
		];
		return "new Dialog({type:'input', header: '', body: " . json_encode($inputs) . ", options:{'" . LANG::GET('planning.event_cancel') . "': false, '" . LANG::GET('planning.event_submit') . "': {'value': true, class: 'reducedCTA'}}})" .
			".then(response => {if (response) {calendarClient.createFormData(response); api.planning('" . ($content ? 'put': 'post') . "', 'calendar');}})";
	}

	/**
	 * @param str $date Y-m-d
	 */
	public function getdate($date = ''){
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_get-date'));
		$statement->execute([
			':date' => $date
		]);
		return $statement->fetchAll(PDO::FETCH_ASSOC);
	}

	/**
	 * @param str $date Y-m-d
	 */
	public function alert($date = ''){
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_alert'));
		$statement->execute([
		]);
		return $statement->fetchAll(PDO::FETCH_ASSOC);
	}

	/**
	 * @param str $earlier Y-m-d | null
	 * @param str $later Y-m-d | null
	 */
	public function getdaterange($earlier = '', $later = ''){
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_get-date-range'));
		$statement->execute([
			':earlier' => $earlier ? : '0001-01-01',
			':later' => $later ? : '9999-12-31'
		]);
		return $statement->fetchAll(PDO::FETCH_ASSOC);
	}

	/**
	 * @param int $content
	 */
	public function search($content = ''){
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_search'));
		$statement->execute([
			':content' => $content
		]);
		return $statement->fetchAll(PDO::FETCH_ASSOC);
	}

	/**
	 * @param str $date
	 * @param str $due
	 * @param str $type
	 * @param str $author
	 * @param str $organizational_unit
	 * @param str $content
	 * @param int $alert
	 */
	public function post($date = '', $due = '', $type = '', $author = '', $organizational_unit = '', $content = '', $alert = 0){
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_post'));
		if ($statement->execute([
			':date' => $date,
			':due' => $due,
			':type' => $type,
			':author' => $author,
			':organizational_unit' => $organizational_unit,
			':content' => $content,
			':alert' => $alert
		])) return $this->_pdo->lastInsertId();
		return false;
	}

	/**
	 * @param int $id
	 * @param str $date
	 * @param str $due
	 * @param str $organizational_unit
	 * @param str $content
	 * @param int $alert
	 */
	public function put($id = 0, $date = '', $due = '', $organizational_unit = '', $content = '', $alert = 0){
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_put'));
		return $statement->execute([
			':id' => $id,
			':date' => $date,
			':due' => $due,
			':author' => $_SESSION['user']['name'], // no need to pass, system doesn't edit
			':organizational_unit' => $organizational_unit,
			':content' => $content,
			':alert' => $alert
		]);
	}

	/**
	 * @param int $id
	 * @param any $complete boolval false will clear
	 */
	public function complete($id = 0, $complete = null){
		if ($complete) $complete = ['user' => $_SESSION['user']['name'], 'date' => date('Y-m-d')];
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_complete'));
		return $statement->execute([
			':id' => $id,
			':completed' => $complete ? json_encode($complete) : '',
		]);
	}

	/**
	 * @param int $id
	 */
	public function delete($id = 0){
		$statement = $this->_pdo->prepare(SQLQUERY::PREPARE('calendar_delete'));
		return $statement->execute([
			':id' => $id
		]);
	}
}
?>